//File Generated By TelemetryFromXTCE.py

#include "COMMSTelemetryContainer.h"

int COMMSTelemetryContainer::size()
{
    return COMMS_CONTAINER_SIZE;
}

unsigned char* COMMSTelemetryContainer::getArray()
{
    return &telemetry[0];
}

char COMMSTelemetryContainer::getStatus()
{
    return telemetry[0];
}
void COMMSTelemetryContainer::setStatus(char uchar)
{
    telemetry[0] = uchar;
}
char COMMSTelemetryContainer::getBootCounter()
{
    return telemetry[1];
}
void COMMSTelemetryContainer::setBootCounter(char uchar)
{
    telemetry[1] = uchar;
}
long COMMSTelemetryContainer::getResetCause()
{
    unsigned long ulong;
    ((unsigned char *)&ulong)[2] = telemetry[2];
    ((unsigned char *)&ulong)[1] = telemetry[3];
    ((unsigned char *)&ulong)[0] = telemetry[4];
    return ulong;
}
void COMMSTelemetryContainer::setResetCause(long ulong)
{
    telemetry[2] = ((unsigned char *)&ulong)[2];
    telemetry[3] = ((unsigned char *)&ulong)[1];
    telemetry[4] = ((unsigned char *)&ulong)[0];
}
unsigned long COMMSTelemetryContainer::getUptime()
{
    unsigned long ulong;
    ((unsigned char *)&ulong)[3] = telemetry[5];
    ((unsigned char *)&ulong)[2] = telemetry[6];
    ((unsigned char *)&ulong)[1] = telemetry[7];
    ((unsigned char *)&ulong)[0] = telemetry[8];
    return ulong;
}
void COMMSTelemetryContainer::setUptime(unsigned long ulong)
{
    telemetry[5] = ((unsigned char *)&ulong)[3];
    telemetry[6] = ((unsigned char *)&ulong)[2];
    telemetry[7] = ((unsigned char *)&ulong)[1];
    telemetry[8] = ((unsigned char *)&ulong)[0];
}
unsigned long COMMSTelemetryContainer::getTotalUptime()
{
    unsigned long ulong;
    ((unsigned char *)&ulong)[3] = telemetry[9];
    ((unsigned char *)&ulong)[2] = telemetry[10];
    ((unsigned char *)&ulong)[1] = telemetry[11];
    ((unsigned char *)&ulong)[0] = telemetry[12];
    return ulong;
}
void COMMSTelemetryContainer::setTotalUptime(unsigned long ulong)
{
    telemetry[9] = ((unsigned char *)&ulong)[3];
    telemetry[10] = ((unsigned char *)&ulong)[2];
    telemetry[11] = ((unsigned char *)&ulong)[1];
    telemetry[12] = ((unsigned char *)&ulong)[0];
}
char COMMSTelemetryContainer::getVersionNumber()
{
    return telemetry[13];
}
void COMMSTelemetryContainer::setVersionNumber(char uchar)
{
    telemetry[13] = uchar;
}
short COMMSTelemetryContainer::getMCUTemp()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[14];
    ((unsigned char *)&ushort)[0] = telemetry[15];
    return ushort;
}
void COMMSTelemetryContainer::setMCUTemp(short ushort)
{
    telemetry[14] = ((unsigned char *)&ushort)[1];
    telemetry[15] = ((unsigned char *)&ushort)[0];
}
bool COMMSTelemetryContainer::getINAStatus()
{
    return ((telemetry[16] & 0x80) != 0);
}
void COMMSTelemetryContainer::setINAStatus(bool bval)
{
    telemetry[16] &= (~0x80);
    telemetry[16] |= bval ? 0x80 : 0x00;
}
bool COMMSTelemetryContainer::getTMPStatus()
{
    return ((telemetry[16] & 0x40) != 0);
}
void COMMSTelemetryContainer::setTMPStatus(bool bval)
{
    telemetry[16] &= (~0x40);
    telemetry[16] |= bval ? 0x40 : 0x00;
}
bool COMMSTelemetryContainer::getTransmitINAStatus()
{
    return ((telemetry[16] & 0x20) != 0);
}
void COMMSTelemetryContainer::setTransmitINAStatus(bool bval)
{
    telemetry[16] &= (~0x20);
    telemetry[16] |= bval ? 0x20 : 0x00;
}
bool COMMSTelemetryContainer::getAmplifierINAStatus()
{
    return ((telemetry[16] & 0x10) != 0);
}
void COMMSTelemetryContainer::setAmplifierINAStatus(bool bval)
{
    telemetry[16] &= (~0x10);
    telemetry[16] |= bval ? 0x10 : 0x00;
}
bool COMMSTelemetryContainer::getPhasingTMPStatus()
{
    return ((telemetry[16] & 0x08) != 0);
}
void COMMSTelemetryContainer::setPhasingTMPStatus(bool bval)
{
    telemetry[16] &= (~0x08);
    telemetry[16] |= bval ? 0x08 : 0x00;
}
bool COMMSTelemetryContainer::getAmplifierTMPStatus()
{
    return ((telemetry[16] & 0x04) != 0);
}
void COMMSTelemetryContainer::setAmplifierTMPStatus(bool bval)
{
    telemetry[16] &= (~0x04);
    telemetry[16] |= bval ? 0x04 : 0x00;
}
short COMMSTelemetryContainer::getVoltage()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[17];
    ((unsigned char *)&ushort)[0] = telemetry[18];
    return ushort;
}
void COMMSTelemetryContainer::setVoltage(short ushort)
{
    telemetry[17] = ((unsigned char *)&ushort)[1];
    telemetry[18] = ((unsigned char *)&ushort)[0];
}
short COMMSTelemetryContainer::getCurrent()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[19];
    ((unsigned char *)&ushort)[0] = telemetry[20];
    return ushort;
}
void COMMSTelemetryContainer::setCurrent(short ushort)
{
    telemetry[19] = ((unsigned char *)&ushort)[1];
    telemetry[20] = ((unsigned char *)&ushort)[0];
}
short COMMSTelemetryContainer::getTemperature()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[21];
    ((unsigned char *)&ushort)[0] = telemetry[22];
    return ushort;
}
void COMMSTelemetryContainer::setTemperature(short ushort)
{
    telemetry[21] = ((unsigned char *)&ushort)[1];
    telemetry[22] = ((unsigned char *)&ushort)[0];
}
short COMMSTelemetryContainer::getReceiverRSSI()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[23];
    ((unsigned char *)&ushort)[0] = telemetry[24];
    return ushort;
}
void COMMSTelemetryContainer::setReceiverRSSI(short ushort)
{
    telemetry[23] = ((unsigned char *)&ushort)[1];
    telemetry[24] = ((unsigned char *)&ushort)[0];
}
short COMMSTelemetryContainer::getTransmitVoltage()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[25];
    ((unsigned char *)&ushort)[0] = telemetry[26];
    return ushort;
}
void COMMSTelemetryContainer::setTransmitVoltage(short ushort)
{
    telemetry[25] = ((unsigned char *)&ushort)[1];
    telemetry[26] = ((unsigned char *)&ushort)[0];
}
short COMMSTelemetryContainer::getTransmitCurrent()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[27];
    ((unsigned char *)&ushort)[0] = telemetry[28];
    return ushort;
}
void COMMSTelemetryContainer::setTransmitCurrent(short ushort)
{
    telemetry[27] = ((unsigned char *)&ushort)[1];
    telemetry[28] = ((unsigned char *)&ushort)[0];
}
short COMMSTelemetryContainer::getAmplifierVoltage()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[29];
    ((unsigned char *)&ushort)[0] = telemetry[30];
    return ushort;
}
void COMMSTelemetryContainer::setAmplifierVoltage(short ushort)
{
    telemetry[29] = ((unsigned char *)&ushort)[1];
    telemetry[30] = ((unsigned char *)&ushort)[0];
}
short COMMSTelemetryContainer::getAmplifierCurrent()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[31];
    ((unsigned char *)&ushort)[0] = telemetry[32];
    return ushort;
}
void COMMSTelemetryContainer::setAmplifierCurrent(short ushort)
{
    telemetry[31] = ((unsigned char *)&ushort)[1];
    telemetry[32] = ((unsigned char *)&ushort)[0];
}
short COMMSTelemetryContainer::getPhasingTemperature()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[33];
    ((unsigned char *)&ushort)[0] = telemetry[34];
    return ushort;
}
void COMMSTelemetryContainer::setPhasingTemperature(short ushort)
{
    telemetry[33] = ((unsigned char *)&ushort)[1];
    telemetry[34] = ((unsigned char *)&ushort)[0];
}
short COMMSTelemetryContainer::getAmplifierTemperature()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[35];
    ((unsigned char *)&ushort)[0] = telemetry[36];
    return ushort;
}
void COMMSTelemetryContainer::setAmplifierTemperature(short ushort)
{
    telemetry[35] = ((unsigned char *)&ushort)[1];
    telemetry[36] = ((unsigned char *)&ushort)[0];
}
